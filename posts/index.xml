<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mogeko`s Blog</title>
    <link>https://mogeko.github.io/posts/</link>
    <description>Recent content in Posts on Mogeko`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 16 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mogeko.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>为 Hugo 添加 Gitalk 评论系统</title>
      <link>https://mogeko.github.io/2018/022/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2018/022/</guid>
      <description>Hugo 是一个强大的静态网页生成器，使用 go 开发。速度贼快，还有 “时时预览” 等特性。不过 Hugo 还比较年轻，没有像 NexT 那样功能强大，成熟稳定的主题。所以很多东西需要自己动手撸。就例如评论系统。
关于 Gitalk  官方网址： https://github.com/gitalk/gitalk/ 在线示例： https://gitalk.github.io/  Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件。它支持多种语言 (包括 en、zh-CN、zh-TW、es-ES、fr)，并自动判断当前语言。最重要的是 Gitalk 使用的是 GitHub Issue 的 api，不依赖任何第三方平台。也就是说, 只要 Github 不倒闭，你的评论系统就不会被关闭。
为 Hugo 添加 Gitalk 评论系统 本博客使用的主题是: Leavelt
不同主题可能有所区别，但原理都是类似的
原理 众所周知，Hugo 会将 Markdown 文档 按照 主题 (包括 HTML 模板、CSS、JavaScript 等) 编译成静态网页
那么我们只需要将 Gitalk 作为一个 &amp;lt;div&amp;gt; 插入到 HTML 模板中，然后在 config.toml 中添加相关配置，就可以实现 Gitalk 评论系统了
创建 Github Application 首先要去 GitHub 上创建一个 Github Application</description>
    </item>
    
    <item>
      <title>空洞骑士: 寻神者 DLC 全成就指南</title>
      <link>https://mogeko.github.io/2018/019/</link>
      <pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2018/019/</guid>
      <description>爆肝 20 多个小时终于打完了 QAQ 写篇指南压压惊 _(:з」∠)_
寻神者 DLC 是真的难，推荐大家在完成主线剧情，做好心理准备，写好遗书后，再开启
我操你大爷的开发者 QAQ
other test</description>
    </item>
    
    <item>
      <title>使用 Hugo &#43; GitHub Page 搭建个人博客</title>
      <link>https://mogeko.github.io/2018/018/</link>
      <pubDate>Sun, 05 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2018/018/</guid>
      <description>&lt;p&gt;正如你所看到的，本博客换了一个主题。但你们看不到的是，本博客将静态页面生成引擎换成了 &lt;a href=&#34;https://github.com/gohugoio/hugo&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hugo 和 Hexo 一样，是一种通用的网站框架。严格来说，这类应用应该被称作静态网站生成器。这类应用将 Markdown 文件和主题一起编译成由 HTML、CSS、JavaScript 组成的静态网页。然后上传到 GitHub 上，通过 GitHub 提供的静态页面托管服务 (GitHub Page) 进行访问。&lt;/p&gt;

&lt;p&gt;这里就写一篇文章来记录一下踩过的坑。&lt;/p&gt;

&lt;p&gt;本站目前使用的主题是 &lt;a href=&#34;https://themes.gohugo.io/hugo-hello-programmer-theme/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hello Programmer&lt;/a&gt;，要配合 Hugo 使用。今后会写一篇文章来详细介绍。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>本地搭建 KMS 激活服务</title>
      <link>https://mogeko.github.io/2018/017/</link>
      <pubDate>Thu, 02 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2018/017/</guid>
      <description>&lt;p&gt;前面有一篇文章介绍了如何用 KMS 服务在线激活 Windows / Office。
这个方法很好，但是也存在问题。KMS 服务激活一次可以正常使用 180 天，过期后自动给你续 180 天，如此重复。如果 KMS 激活服务器一直运行着还好，但如果服务器挂掉了呢？
要解决这个问题，最直接的方法就是让 KMS 激活服务器保持稳定不宕机，这显然是不现实的。毕竟是私人搭的服务器，别免费给你用，不稳定也是情有可原的。所以我们不妨换个思路：&lt;strong&gt;既然别人的服务器不稳定，我们为何不在本地自己搭一个呢？&lt;/strong&gt;
今天，我就教大家如何在本地搭建 KMS 激活服务器。&lt;/p&gt;

&lt;p&gt;免费开源的 KMS 激活服务器有很多，我们今天使用的 &lt;code&gt;vlmcsd&lt;/code&gt; 是比较流行的一种。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>WSL 的安装与使用</title>
      <link>https://mogeko.github.io/2018/016/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2018/016/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/016/logo.png&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;16 年 12 月份的时候，微软发布了 Windows Subsystem for Linux (WSL)，通过子系统的方式运行了一个完整的 Linux 系统。使得在 Windows 中使用 Linux 中的工具链成为可能。(Windows 果然是最好的 Linux 发行版)&lt;/p&gt;

&lt;p&gt;从微软宣布 WSL 的第一天起，我就一直在关注这项技术。因为我虽然通过双系统的方式安装了 Ubuntu，但切换系统需要从启的机制确实不方便，让我离开 Windows 又实在是不太现实。 (学习的原因，离不开 Visual Studio 和 Adobe 全家桶) WSL 似乎是平衡性能和易用性的最好解决方案了。怎奈何 WSL 只支持 64 位的系统，让我这台老电脑很是尴尬。&lt;/p&gt;

&lt;p&gt;如今换电脑了！终于可以享受 WSL 的便利了！！ (*^▽^*)&lt;/p&gt;

&lt;p&gt;第一次使用时，&lt;strong&gt;如果发现没有 WSL 中没有网络连接，可以试着重启一下 WSL，还是没网重启一下 Windows&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Android 手机搭建 KMS 激活服务器</title>
      <link>https://mogeko.github.io/2018/015/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2018/015/</guid>
      <description>&lt;p&gt;经测试，&lt;strong&gt;以前的方法已经失效了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;今天就教大家一个新的方法在 Android 手机上安装 KMS 激活服务。而且新方法&lt;strong&gt;不需要 Magisk 框架&lt;/strong&gt;，相比于原来的方法更简单安全。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;&lt;strong&gt;需要 Magisk 框架&lt;/strong&gt; -&amp;gt; &lt;a href=&#34;https://mogeko.github.io/2018/010/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Magisk 介绍与简易安装教程&lt;/a&gt;&lt;del/&gt;&lt;/p&gt;

&lt;p&gt;老师让做 PPT 但电脑里没装 Office，怎么办？
答案当然是买一个！
但对于没钱买正版的同学怎么办呢？
其实，可以下载批量激活版（VOL 版）的 Office，然后用 KMS 激活。
今天就教大家如何用手机搭建 KMS 激活服务器来激活 VOL 版的 Windows 或 Office。（零售版（Retail 版）的 Office 可以用&lt;a href=&#34;https://github.com/Mogeko/mogeko.github.io/releases/download/2018%2F3%2F5/Retail2VOL.cmd&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;脚本&lt;/a&gt;转换为 VOL 版，然后作为 VOL 版 Office 激活）
如果不知道你安装的 Office 是哪个版本，可以用以下方法查看。-&amp;gt; &lt;a href=&#34;https://mogeko.github.io/2018/015/#%E5%88%A4%E6%96%AD%E4%BD%A0%E5%AE%89%E8%A3%85%E7%9A%84-Office-%E6%98%AF%E5%93%AA%E4%B8%AA%E7%89%88%E6%9C%AC&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;判断你安装的 Office 是哪个版本&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 KMS 激活 Windows / Office</title>
      <link>https://mogeko.github.io/2018/014/</link>
      <pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2018/014/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/014/logo.jpg&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;事实上，我一向不鼓励使用盗版系统 / 软件的。但对于穷人 (学生党) 来说，需要使用相关软件却买不起正版，使用盗版也是没办法的事情。
对于想使用 Windows / Office 却没有足够资金购买正版的用户来说，很多人会选择 &lt;code&gt;KMSpico&lt;/code&gt; 等激活工具进行激活，但事实上，大多数这类工具都带有病毒，轻则劫持主页，重则加密硬盘 (勒索病毒)。
自从上次我妹因此中毒后，我就开始了如何安全的激活 Windows / Office 的研究。KMS 激活服务便是我的答案。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里使用的 KMS 激活服务器地址为：&lt;code&gt;kms.03k.org&lt;/code&gt;，属于网友自建的 KMS 激活服务器。如果服务器地址失效的话，你也可以使用百度 / Google 等搜索引擎搜索 &lt;code&gt;KMS 激活服务器地址&lt;/code&gt; 来替换。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当然，你也可以&lt;strong&gt;自建 KMS 激活服务器&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://mogeko.github.io/2018/015/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;使用 Android 手机搭建 KMS 激活服务器&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://mogeko.github.io/2018/017/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;本地搭建 KMS 激活服务&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>BaiduPCS-Go | 百度网盘命令行工具 (基于 Go)</title>
      <link>https://mogeko.github.io/2018/013/</link>
      <pubDate>Wed, 07 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2018/013/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/013/Logo.png&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;提到百度网盘，想必大家都很熟悉吧。&lt;/p&gt;

&lt;p&gt;百度网盘自 2012 年上线运行以来，迅速积累了大量用户。但是狗改不了吃屎，作为百度的产品，百度网盘现在是越来越恶心了，不给充钱就限速，官方居然还不承认（&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98#%E8%B4%9F%E9%9D%A2%E6%B6%88%E6%81%AF&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;百度网盘 - 维基百科&lt;/a&gt; ）其实给免费账号限速也是可以理解的（毕竟别人也是要吃饭的，没有利润的产品肯定是走不远的）但百度居然给我限速到 &lt;code&gt;20 KB/s&lt;/code&gt;！这还能用？！！&lt;/p&gt;

&lt;p&gt;但人们的力量是强大的，被百度恶心到的用户们很快就找到了破解百度网盘限速的方法——&lt;strong&gt;多线程下载&lt;/strong&gt;。你不是只给我 &lt;code&gt;20 KB/s&lt;/code&gt; 吗？我开TM 500 个线程，一样把 &lt;code&gt;10 M/s&lt;/code&gt; 的带宽占满。于是乎一大批第三方网盘拔地而起，例如：&lt;del&gt;&lt;a href=&#34;https://pandownload.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;PanDownload&lt;/a&gt;&lt;/del&gt;（已停止运营）、&lt;a href=&#34;https://www.coolapk.com/apk/com.downloading.main.baiduyundownload&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Village&lt;/a&gt;（Android）、&lt;a href=&#34;https://greasyfork.org/zh-CN/scripts?utf8=%E2%9C%93&amp;amp;q=%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;油猴脚本&lt;/a&gt; 等。&lt;/p&gt;

&lt;p&gt;今天介绍的 BaiduPCS-Go 也是其中一个，相比于其他第三方网盘，具有以下特点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不需要 Aria2、IDM 等第三方软件&lt;/li&gt;
&lt;li&gt;自定义线程数（建议将&lt;code&gt;最大线程数&lt;/code&gt;设置为 &lt;code&gt;50 ~ 500&lt;/code&gt;，线程开太多会造成搞负载）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持通配符匹配路径&lt;/strong&gt;  &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%80%9A%E9%85%8D%E7%AC%A6&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;通配符-维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;命(bi)令(ge)行(gao)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>如何给 Steam 换皮肤</title>
      <link>https://mogeko.github.io/2017/012/</link>
      <pubDate>Wed, 06 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/012/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/012/logo.jpg&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Steam 大法吼啊！！！&lt;/p&gt;

&lt;p&gt;刚刚过去的黑五，大家有没有愉快的剁手啊？😏😏&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/012/Fat_G.gif&#34; alt=&#34;G胖还我血汗钱！！！&#34; /&gt;&lt;/p&gt;

&lt;p&gt;虽然我们嘴上骂着 G胖，但身体还是很诚实的嘛，不然也不会这么心甘情愿的给 G胖 贡献销量嘛😏&lt;/p&gt;

&lt;p&gt;尽管 V社出品的游戏个个精品，但 V社家的 Steam 是真的难用，又慢，又丑。慢是网络的问题，没办法；但丑，是真的没得洗。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;审美是很个人的事，反正我反正觉得 Steam 原版的皮肤丑到爆，如果你觉得原版皮肤好看也是没有问题的(・ω・)ノ❤&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;V社 的游戏向来以它的开放性著称，想想当年鼓励mod催生了CS，决胜之日， 甚至CS又催生了各种跳跃、魔兽、僵尸、龙珠各种好玩的服务器，原版被改的面目全非，唯一不变的是好玩。（扯远了…）
其实， V社 的开放性不仅仅体现在它们家的游戏上，在 Steam 上也是有体现的！&lt;strong&gt;觉得 Steam 丑？没事，换掉就可以了！&lt;/strong&gt;没错，Steam是可以换皮肤的，而且不仅仅是换个颜色怎么简单，整套 UI 都可以被替换，唯一能限制你的，只有你的想象力。&lt;/p&gt;

&lt;p&gt;先秀一波皮肤再说（逃&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/012/steam_air.png&#34; alt=&#34;Steam_Metro&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Android 使用 Chrome 的五个理由</title>
      <link>https://mogeko.github.io/2017/011/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/011/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/011/logo.jpg&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;PC 上的 Chrome 毫无疑问是最好的浏览器之一。那市场份额，&lt;del&gt;都快逼近 IE 了&lt;/del&gt;。不仅把曾经的老大哥 IE 远远的甩在后面，还把被微软委以大任的 Microsoft Edge 按在地上摩擦，弄得微软很是尴尬。然而在 Google 自家的 Android 上，发展得却不如 PC 上好，有的地方就连我这种骨粉也觉得用起来不舒服。不过，最近几次更新中，我觉得是越改越好了，特别是今天，无意中发现了几个新功能，突然打开了新世界的大门，也让我对 Chrome 的评价从 “不推荐”变成“特别推荐”！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>神奇的 Magisk</title>
      <link>https://mogeko.github.io/2017/010/</link>
      <pubDate>Sat, 02 Dec 2017 18:00:00 +0800</pubDate>
      
      <guid>https://mogeko.github.io/2017/010/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/010/Magisk_Logo.png&#34;  alt=&#34;Logo&#34;  style=&#34;border:0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今天为大家介绍一款神奇的 Android 第三方接口 —— Magisk&lt;/p&gt;

&lt;h1 id=&#34;root-玩家与厂商间的博弈&#34;&gt;Root —— 玩家与厂商间的博弈&lt;/h1&gt;

&lt;p&gt;Android 从诞生之日起就高举着开源的大旗，这也是它成功的原因之一。而它的开放性也成功的吸引到了一大批爱折腾的人，从而诞生出了 root（此处特制 Android 中的 root）。&lt;/p&gt;

&lt;p&gt;根据 &lt;a href=&#34;https://zh.wikipedia.org/wiki/Root#.E8.A8.88.E7.AE.97.E6.A9.9F.E6.87.89.E7.94.A8&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt; 的释义，root 指的是使用户取得 Android 操作系统的超级用户（Super User）许可权的技术。用户通过 root，可以越过手机制造商的限制，卸载手机制造商预装在手机中某些应用，以及运行一些需要超级用户权限的应用程序。同时,root 也可能会让手机变得“不安全”（并不是说 root 使手机变得不安全，而是一些用户的使用习惯会使 root 后的手机变得危险）。&lt;/p&gt;

&lt;p&gt;但是从棉花糖（Android 6.0）开始，Google 基本阻止了以前版本中最流行的 root 方法 —— 即，将 su守护程序 放置到 /system 分区，并在启动时取得所需的权限。道高一尺，魔高一丈，于是就出现了 systemless 的 root 方式，因为它不采取任何方式修改 /system 分区。&lt;/p&gt;

&lt;p&gt;出于增加安全性的考虑，Google 推出了 SafetyNet 这样的检测，以确保 Android Pay 等一些 App 的安全运行，玩家不得不在 root 权限和一些有价值的 App 之间作出选择。&lt;/p&gt;

&lt;p&gt;这个时候 Magisk 诞生了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何将 Ubuntu 升级到 17.10</title>
      <link>https://mogeko.github.io/2017/009/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/009/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/009/logo.png&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu 17.10 已经发布了一段时间了，作为 18.04 的预览（热）版。带来了一大波新特性。&lt;/p&gt;

&lt;p&gt;其中最重要也是最令我揪心的是 Ubuntu 将放弃 Unity 回归 Gnome。对于我们这些习惯了 Unity 的用户来说，这个决定简直蠢到家了。虽然 Unity 是丑了点，但比 Gnome 好用到不知道那里去了！这也是我迟迟没有升级的主要原因。&lt;/p&gt;

&lt;p&gt;目前 &lt;strong&gt;Ubuntu 17.10 不是长期支持版本（LTS）！！！&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kindle 使用技巧</title>
      <link>https://mogeko.github.io/2017/007/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/007/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/007/logo.jpg&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;入手 Kindle 快一年半了，当时家里人都觉得我只是一时兴起，买回来迟早要吃灰的。但没想到我断断续续的用 Kindle 看了 100 本书了！！！感觉好有成就感。&lt;/p&gt;

&lt;p&gt;今天就结合我对 Kindle 一年多的使用，谈谈我知道的一些 Kindle 的使用技巧。&lt;/p&gt;

&lt;p&gt;欢迎补充~~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reabble | Kindle 下的 RRS 神器</title>
      <link>https://mogeko.github.io/2017/008/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/008/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/008/logo.png&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Amazon 官方系统的 Kindle 中内置了一个 &lt;code&gt;体验版浏览器&lt;/code&gt;，用起来真的很鸡肋。一开始根本不知道 Amazon 到底在想什么，做怎么个又慢，又不稳定的浏览器，浪费老子硬盘。直到那天，手机被收了&lt;em&gt;(:°з」∠)&lt;/em&gt;
其实真正让我爱上那个辣鸡浏览器的是 RSS 神器——Reabble。&lt;/p&gt;

&lt;p&gt;那是一个血雨腥风的晚自习，老师一边讲着刚考完的月考试卷一边骂人。
在教室的第一排，我蜷缩在书本堆中，偷偷用 Kindle 内置的辣鸡浏览器连着教务处的 WiFi 逛知乎。。。（那时真的好 6，老师与我的直线距离不到 3 米，现在想想都觉得后怕）
就在那天晚上，我发现了这个 Kindle 上的 RSS 神器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fira Code | 为写程序而生的字体</title>
      <link>https://mogeko.github.io/2017/006/</link>
      <pubDate>Sat, 16 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/006/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/3a8948f34284f378ead7af5846aa432035c687ad/687474703a2f2f732e746f6e736b792e6d652f696d67732f666972615f636f64655f6c6f676f2e737667&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;程序员福利！！！&lt;/strong&gt;
今天为大家带来一个专为程序员写程序设计的字体 —— Fira Code
Fira 是 Mozilla 公司（火狐浏览器她爹）主推的字体系列。Fira Code 是其中的一员，专为写程序而生。出来具有&lt;code&gt;等宽&lt;/code&gt;等基本属性外，还加入了编程连字特性（ligatures）。&lt;/p&gt;

&lt;p&gt;Fira Code 就是利用这个特性对编程中的常用符号进行优化，比如把输入的「!=」直接显示成「≠」或者把「&amp;gt;=」变成「≥ 」等等，以此来提高代码的可读性。
&lt;img src=&#34;https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/all_ligatures.png&#34; alt=&#34;Fira Code|Fire Mono&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在你的文章中添加 B站的视频</title>
      <link>https://mogeko.github.io/2017/005/</link>
      <pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/005/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/005/logo.png&#34; alt=&#34;Logo&#34; /&gt;
参考 &lt;a href=&#34;https://github.com/Z4Tech/hexo-tag-bilibili&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;https://github.com/Z4Tech/hexo-tag-bilibili&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Hexo Hey 管理你的博客</title>
      <link>https://mogeko.github.io/2017/004/</link>
      <pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/004/</guid>
      <description>&lt;p&gt;在使用 Hexo Hey 之前，我一直在使用 VSCode（配合 vscode-hexo 插件）来管理博客。虽然可以很快捷 的&lt;code&gt;新建&lt;/code&gt;,&lt;code&gt;部署&lt;/code&gt;, &lt;code&gt;测试&lt;/code&gt;,&lt;code&gt;发布&lt;/code&gt; 博客 ，但还是很麻烦，离我理想中的博客平台还有一定的距离。
我在知乎上发现了 Hexo Hey 这个插件，尝试了一下，虽然有各种问题，但确实很好用。
因此决定写一篇文章来介绍一下如何&lt;code&gt;安装&lt;/code&gt;, &lt;code&gt;使用&lt;/code&gt; Hexo Hey。&lt;/p&gt;

&lt;p&gt;切换换到 Hexo Hey 后最不习惯的地方就是没有了 VSCode 中那些方便的快捷键了。(ノへ￣、)[擦眼泪……]&lt;/p&gt;

&lt;p&gt;与 Hexo Hey 比较相似的 Hexo 博客管理程序还有 &lt;a href=&#34;https://github.com/jaredly/hexo-admin&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Hexo Admin&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hexo 美化</title>
      <link>https://mogeko.github.io/2017/003/</link>
      <pubDate>Mon, 28 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/003/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/003/logo.png&#34; alt=&#34;Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;虽然 NexT 的主题很漂亮，但问题是太受欢迎了，都快烂大街了。
好在它是一个开源项目，我们可以通过修改它的代码来个性话你的博客。
这篇教程要涉及到一些前端知识，可能没有那么 Novice friendly。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;因为涉及到对 NexT 代码的修改，搞不好，可能引起 Hexo 无法工作。所以强烈建议使用 Git 对 NexT 进行备份。&lt;/strong&gt;
具体使用方法请自行 Google。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 Hexo &#43; GitHub 建立自己的博客</title>
      <link>https://mogeko.github.io/2017/002/</link>
      <pubDate>Sun, 20 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/002/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/002/logo.jpg&#34; alt=&#34;Logo&#34; /&gt;
自从我开了这个博客后，就有很多小伙伴问我怎么弄的？（好吧，其实就一个(*/ω＼*)）
为了教她，也为了给各位看官一点参考。我写了这篇文章。
因为她比较小白，所以这篇文章会写得比较详细。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UAC 白名单</title>
      <link>https://mogeko.github.io/2017/001/</link>
      <pubDate>Fri, 18 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/001/</guid>
      <description>&lt;p&gt;好像废话有点多&lt;em&gt;(:з)∠)&lt;/em&gt; -&amp;gt;-&amp;gt; &lt;a href=&#34;https://mogeko.github.io/2017/001/#Start&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;直接开始的传送门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一直觉得微软为 Windows 引入 UAC 是个明智的选择，它能在一定程度上减少 Windows 平台过于开放，流氓软件肆意横行的局面。
国内的情况比较特殊，因为很多人根本不知道那是什么，无脑点 “允许” 。
都是被那群流氓给教坏的。。。
抛开这些不谈，即使 UAC 的使用很有必要，但每次都弹出的蓝色框框确实很烦人，特别是在那些需要曾经使用管理员权限的软件上。因此，有的人直接选择关闭 UAC ，不过这样却对系统安全性产生了风险。&lt;/p&gt;

&lt;p&gt;所以，如何才能在不关闭 UAC 的情况下，让某些应用不经过 UAC 使用管理员权限？&lt;/p&gt;

&lt;p&gt;我首先想到的是使用 Autohotkey 帮用户点“允许”
桌面分为三层，分别是 Winlogon Desktop、Screensaver Desktop、Application Desktop。
所有的应用都运行在 Application Desktop 上（ UAC 不算）。UAC 在 Winlogon Desktop 上弹出的窗口。
也就是说，以Autohotkey 所在的位置 UAC 它捞都捞不到。。。&lt;/p&gt;

&lt;p&gt;那么，到底要如何干掉 UAC 呢？&lt;/p&gt;

&lt;p&gt;经过研究发现，想要在不关闭 UAC 的情况下，让某些应用不经过 UAC 使用管理员权限有两种方法。
分别是使用 任务计划程序 或 &lt;a href=&#34;https://technet.microsoft.com/en-us/library/cc766242(v=ws.10).aspx&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Application Compatibility Toolkit (ACT)&lt;/a&gt;。
这里只解释使用 任务计划程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安装 Ubuntu 双系统</title>
      <link>https://mogeko.github.io/2017/000/</link>
      <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mogeko.github.io/2017/000/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://mogeko.github.io/images/000/logo.jpg&#34; alt=&#34;Logo&#34; /&gt;
在很久以前就想试一试Linux了，一直没有实践。一是觉得太麻烦，二是怕把电脑弄坏。后来实践了一次后发现，其实并没有想象中那么难，这是一个完全独立的系统，与隔壁的Windows半毛钱关系都没有。把引导搞定就不怕了。&lt;/p&gt;

&lt;p&gt;另外，如果想长期使用；
&lt;strong&gt;千万不要上最新的系统！！！&lt;/strong&gt;
bug多得一逼&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>